{"ast":null,"code":"var _jsxFileName = \"/Users/apple/Desktop/Project/Git/React-study/src/components/hooks/useReducer/UseReducerObject.js\",\n  _s = $RefreshSig$();\nimport React, { useReducer } from 'react';\n\n// ----------------------------------Usecase 1 : Example with single object value----------------------------------\n\n// const initialState = {\n//     firstCounter: 0\n// };\n\n// const reducer = (state, action) => {\n//     switch (action.type) {\n//         case 'Increment':\n//             return { firstCounter: state.firstCounter + 1 }\n//         case 'Decrement':\n//             return { firstCounter: state.firstCounter - 1 }\n//         case 'Reset':\n//             return initialState\n//         default:\n//             return state;\n//     }\n// }\n\n// function UseReducerObject() {\n//     const [count, dispatch] = useReducer(reducer, initialState);\n//     return (\n//         <>\n//             <div>Count - {count.firstCounter}</div>\n//             <button onClick={() => dispatch({type: 'Increment'})}>Increment</button>\n//             <button onClick={() => dispatch({type: 'Decrement'})}>Decrement</button>\n//             <button onClick={() => dispatch({type: 'Reset'})}>Reset</button>\n//         </>\n//     )\n// }\n\n// export default UseReducerObject\n\n// ----------------------------------Usecase 2 : Example with multiple object values----------------------------------\n\n// const initialState = {\n//     firstCounter: 0\n// };\n\n// const reducer = (state, action) => {\n//     switch (action.type) {\n//         case 'Increment':\n//             return { firstCounter: state.firstCounter + action.value }\n//         case 'Decrement':\n//             return { firstCounter: state.firstCounter - action.value }\n//         case 'Reset':\n//             return initialState\n//         default:\n//             return state;\n//     }\n// }\n\n// function UseReducerObject() {\n//     const [count, dispatch] = useReducer(reducer, initialState);\n//     return (\n//         <>\n//             <div>Count - {count.firstCounter}</div>\n//             <button onClick={() => dispatch({type: 'Increment', value: 2})}>Increment by 2</button>\n//             <button onClick={() => dispatch({type: 'Decrement', value: 2})}>Decrement by 2</button>\n//             <button onClick={() => dispatch({type: 'Increment', value: 5})}>Increment by 5</button>\n//             <button onClick={() => dispatch({type: 'Decrement', value: 3})}>Decrement by 3</button>\n//             <button onClick={() => dispatch({type: 'Reset'})}>Reset</button>\n//         </>\n//     )\n// }\n\n// export default UseReducerObject\n\n// ----------------------------------Usecase 3 : Example with multiple counter----------------------------------\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  firstCounter: 0,\n  secondCounter: 0\n};\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'Increment1':\n      return {\n        ...state,\n        firstCounter: state.firstCounter + 1\n      };\n    case 'Decrement1':\n      return {\n        ...state,\n        firstCounter: state.firstCounter - 1\n      };\n    case 'Reset1':\n      return {\n        ...state,\n        firstCounter: initialState.firstCounter\n      };\n    case 'Increment2':\n      return {\n        ...state,\n        secondCounter: state.secondCounter + 1\n      };\n    case 'Decrement2':\n      return {\n        ...state,\n        secondCounter: state.secondCounter - 1\n      };\n    case 'Reset2':\n      return {\n        ...state,\n        secondCounter: initialState.secondCounter\n      };\n    default:\n      return state;\n  }\n};\nfunction UseReducerObject() {\n  _s();\n  const [count, dispatch] = useReducer(reducer, initialState);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Count 1 - \", count.firstCounter]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => dispatch({\n          type: 'Increment1'\n        }),\n        children: \"Increment counter 1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => dispatch({\n          type: 'Decrement1'\n        }),\n        children: \"Decrement counter 1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => dispatch({\n          type: 'Reset1'\n        }),\n        children: \"Reset counter 1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Count 2 - \", count.secondCounter]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => dispatch({\n          type: 'Increment2'\n        }),\n        children: \"Increment counter 2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => dispatch({\n          type: 'Decrement2'\n        }),\n        children: \"Decrement counter 2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => dispatch({\n          type: 'Reset2'\n        }),\n        children: \"Reset counter 2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_s(UseReducerObject, \"lCuvQ9nV3fBNxlJmZItTAw1hKFs=\");\n_c = UseReducerObject;\nexport default UseReducerObject;\nvar _c;\n$RefreshReg$(_c, \"UseReducerObject\");","map":{"version":3,"names":["React","useReducer","jsxDEV","_jsxDEV","Fragment","_Fragment","initialState","firstCounter","secondCounter","reducer","state","action","type","UseReducerObject","_s","count","dispatch","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/apple/Desktop/Project/Git/React-study/src/components/hooks/useReducer/UseReducerObject.js"],"sourcesContent":["import React, { useReducer } from 'react'\n\n// ----------------------------------Usecase 1 : Example with single object value----------------------------------\n\n// const initialState = {\n//     firstCounter: 0\n// };\n\n// const reducer = (state, action) => {\n//     switch (action.type) {\n//         case 'Increment':\n//             return { firstCounter: state.firstCounter + 1 }\n//         case 'Decrement':\n//             return { firstCounter: state.firstCounter - 1 }\n//         case 'Reset':\n//             return initialState\n//         default:\n//             return state;\n//     }\n// }\n\n// function UseReducerObject() {\n//     const [count, dispatch] = useReducer(reducer, initialState);\n//     return (\n//         <>\n//             <div>Count - {count.firstCounter}</div>\n//             <button onClick={() => dispatch({type: 'Increment'})}>Increment</button>\n//             <button onClick={() => dispatch({type: 'Decrement'})}>Decrement</button>\n//             <button onClick={() => dispatch({type: 'Reset'})}>Reset</button>\n//         </>\n//     )\n// }\n\n// export default UseReducerObject\n\n\n\n// ----------------------------------Usecase 2 : Example with multiple object values----------------------------------\n\n// const initialState = {\n//     firstCounter: 0\n// };\n\n// const reducer = (state, action) => {\n//     switch (action.type) {\n//         case 'Increment':\n//             return { firstCounter: state.firstCounter + action.value }\n//         case 'Decrement':\n//             return { firstCounter: state.firstCounter - action.value }\n//         case 'Reset':\n//             return initialState\n//         default:\n//             return state;\n//     }\n// }\n\n// function UseReducerObject() {\n//     const [count, dispatch] = useReducer(reducer, initialState);\n//     return (\n//         <>\n//             <div>Count - {count.firstCounter}</div>\n//             <button onClick={() => dispatch({type: 'Increment', value: 2})}>Increment by 2</button>\n//             <button onClick={() => dispatch({type: 'Decrement', value: 2})}>Decrement by 2</button>\n//             <button onClick={() => dispatch({type: 'Increment', value: 5})}>Increment by 5</button>\n//             <button onClick={() => dispatch({type: 'Decrement', value: 3})}>Decrement by 3</button>\n//             <button onClick={() => dispatch({type: 'Reset'})}>Reset</button>\n//         </>\n//     )\n// }\n\n// export default UseReducerObject\n\n\n\n// ----------------------------------Usecase 3 : Example with multiple counter----------------------------------\n\nconst initialState = {\n    firstCounter: 0,\n    secondCounter: 0\n};\n\nconst reducer = (state, action) => {\n    switch (action.type) {\n        case 'Increment1':\n            return { ...state, firstCounter: state.firstCounter + 1 }\n        case 'Decrement1':\n            return { ...state, firstCounter: state.firstCounter - 1 }\n        case 'Reset1':\n            return { ...state, firstCounter: initialState.firstCounter }\n        case 'Increment2':\n            return { ...state, secondCounter: state.secondCounter + 1 }\n        case 'Decrement2':\n            return { ...state, secondCounter: state.secondCounter - 1 }\n        case 'Reset2':\n            return { ...state, secondCounter: initialState.secondCounter }\n        default:\n            return state;\n    }\n}\n\nfunction UseReducerObject() {\n    const [count, dispatch] = useReducer(reducer, initialState);\n    return (\n        <>\n            <div>\n                <div>Count 1 - {count.firstCounter}</div>\n                <button onClick={() => dispatch({ type: 'Increment1' })}>Increment counter 1</button>\n                <button onClick={() => dispatch({ type: 'Decrement1' })}>Decrement counter 1</button>\n                <button onClick={() => dispatch({ type: 'Reset1' })}>Reset counter 1</button>\n            </div>\n            <div>\n            <div>Count 2 - {count.secondCounter}</div>\n                <button onClick={() => dispatch({ type: 'Increment2' })}>Increment counter 2</button>\n                <button onClick={() => dispatch({ type: 'Decrement2' })}>Decrement counter 2</button>\n                <button onClick={() => dispatch({ type: 'Reset2' })}>Reset counter 2</button>\n            </div>\n        </>\n    )\n}\n\nexport default UseReducerObject\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}