{"ast":null,"code":"var _jsxFileName = \"/Users/apple/Desktop/Project/Git/React-study/src/components/hooks/useMemo/UseMemoBasic.js\",\n  _s = $RefreshSig$();\n/**\n * Step 1: Create two counters and display count values for both\n * Step 2: maintain two separate states for counters using useState\n * \n * Now, when you update either of the counter, respective counter value changes immediately on button click.\n * \n * Step 3: Add an expensive function(time taking) which is has one count value's dependency. Let's take for counter 1: isEven()\n * \n * Now, if you update counter 1, it takes some time to show the updated count value for counter 1 as expensive method is rendering to calculate based on count1.\n * If you try to update counter 2, it will also take some time before updating the value for counter 2. It is because component re-renders and expensive method added isEven runs again.  To avoid this, we can use useMemo hook.\n * \n * What is useMemo hook?\n * The React useMemo Hook returns a memoized value.\n * Think of memoization as caching a value so that it does not need to be recalculated.\n * The useMemo Hook only runs when one of its dependencies update.\n * This can improve performance.\n * The useMemo and useCallback Hooks are similar. The main difference is that useMemo returns a memoized value and useCallback returns a memoized function. \n * \n * \n * Step 4: Now, create a useMemo hook. It takes two parameters:\n * 1. Expensive function(time taking function)\n * 2. Dependency variable\n * \n * Now, counter 1 will take some time to update and reflect the value but as counter2 has no dependency, it will show updated value without any delay.\n */\n\nimport React, { useMemo, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction UseMemoBasic() {\n  _s();\n  const [count1, setCount1] = useState(0);\n  const [count2, setCount2] = useState(0);\n  const isEven = useMemo(() => {\n    let i = 0;\n    while (i < 1000000000) i++; // Ading this expensive(slow) function to demonstrate the usage of useMemo hook\n    return count1 % 2 === 0;\n  }, [count1]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setCount1(count1 + 1),\n        children: [\"Counter 1 - \", count1]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this), isEven ? 'Even' : 'Odd']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setCount2(count2 + 1),\n        children: [\"Counter 2 - \", count2]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n}\n_s(UseMemoBasic, \"/pv+10SyAS7p5/7pma4yXxda5RM=\");\n_c = UseMemoBasic;\nexport default UseMemoBasic;\nvar _c;\n$RefreshReg$(_c, \"UseMemoBasic\");","map":{"version":3,"names":["React","useMemo","useState","jsxDEV","_jsxDEV","UseMemoBasic","_s","count1","setCount1","count2","setCount2","isEven","i","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/apple/Desktop/Project/Git/React-study/src/components/hooks/useMemo/UseMemoBasic.js"],"sourcesContent":["/**\n * Step 1: Create two counters and display count values for both\n * Step 2: maintain two separate states for counters using useState\n * \n * Now, when you update either of the counter, respective counter value changes immediately on button click.\n * \n * Step 3: Add an expensive function(time taking) which is has one count value's dependency. Let's take for counter 1: isEven()\n * \n * Now, if you update counter 1, it takes some time to show the updated count value for counter 1 as expensive method is rendering to calculate based on count1.\n * If you try to update counter 2, it will also take some time before updating the value for counter 2. It is because component re-renders and expensive method added isEven runs again.  To avoid this, we can use useMemo hook.\n * \n * What is useMemo hook?\n * The React useMemo Hook returns a memoized value.\n * Think of memoization as caching a value so that it does not need to be recalculated.\n * The useMemo Hook only runs when one of its dependencies update.\n * This can improve performance.\n * The useMemo and useCallback Hooks are similar. The main difference is that useMemo returns a memoized value and useCallback returns a memoized function. \n * \n * \n * Step 4: Now, create a useMemo hook. It takes two parameters:\n * 1. Expensive function(time taking function)\n * 2. Dependency variable\n * \n * Now, counter 1 will take some time to update and reflect the value but as counter2 has no dependency, it will show updated value without any delay.\n */\n\nimport React, { useMemo, useState } from 'react'\n\nfunction UseMemoBasic() {\n\n    const [count1, setCount1] = useState(0);\n    const [count2, setCount2] = useState(0);\n\n    const isEven = useMemo(() => {\n        let i = 0;\n        while(i<1000000000) i++; // Ading this expensive(slow) function to demonstrate the usage of useMemo hook\n        return count1 % 2 === 0\n    }, [count1])\n\n    return (\n        <div>\n            <div>\n                <button onClick={() => setCount1(count1 + 1)}>Counter 1 - {count1}</button>\n                {isEven ? 'Even' : 'Odd'}\n            </div>\n            <div>\n                <button onClick={() => setCount2(count2 + 1)}>Counter 2 - {count2}</button>\n            </div>\n        </div>\n    )\n}\n\nexport default UseMemoBasic\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAIC,OAAO,EAAEC,QAAQ,QAAQ,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEhD,SAASC,YAAYA,CAAA,EAAG;EAAAC,EAAA;EAEpB,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGN,QAAQ,CAAC,CAAC,CAAC;EACvC,MAAM,CAACO,MAAM,EAAEC,SAAS,CAAC,GAAGR,QAAQ,CAAC,CAAC,CAAC;EAEvC,MAAMS,MAAM,GAAGV,OAAO,CAAC,MAAM;IACzB,IAAIW,CAAC,GAAG,CAAC;IACT,OAAMA,CAAC,GAAC,UAAU,EAAEA,CAAC,EAAE,CAAC,CAAC;IACzB,OAAOL,MAAM,GAAG,CAAC,KAAK,CAAC;EAC3B,CAAC,EAAE,CAACA,MAAM,CAAC,CAAC;EAEZ,oBACIH,OAAA;IAAAS,QAAA,gBACIT,OAAA;MAAAS,QAAA,gBACIT,OAAA;QAAQU,OAAO,EAAEA,CAAA,KAAMN,SAAS,CAACD,MAAM,GAAG,CAAC,CAAE;QAAAM,QAAA,GAAC,cAAY,EAACN,MAAM;MAAA;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAS,CAAC,EAC1EP,MAAM,GAAG,MAAM,GAAG,KAAK;IAAA;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvB,CAAC,eACNd,OAAA;MAAAS,QAAA,eACIT,OAAA;QAAQU,OAAO,EAAEA,CAAA,KAAMJ,SAAS,CAACD,MAAM,GAAG,CAAC,CAAE;QAAAI,QAAA,GAAC,cAAY,EAACJ,MAAM;MAAA;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAS;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1E,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd;AAACZ,EAAA,CAtBQD,YAAY;AAAAc,EAAA,GAAZd,YAAY;AAwBrB,eAAeA,YAAY;AAAA,IAAAc,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}