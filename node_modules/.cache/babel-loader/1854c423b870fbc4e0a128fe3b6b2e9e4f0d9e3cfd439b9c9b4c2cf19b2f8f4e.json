{"ast":null,"code":"var _s = $RefreshSig$();\nimport axios from 'axios';\nimport React, { useEffect, useReducer, useState } from 'react';\n\n// // Data fetching using useState and useEffect.\n\n// function DataFetching() {\n\n//     const [loading, setLoading] = useState(true);\n//     const [post, setPost] = useState({})\n//     const [error, setError] = useState('');\n\n//     useEffect(() => {\n//         // Added setTimeout just to see the Loader\n//         setTimeout(() => {\n//             axios.get('https://jsonplaceholder.typicode.com/posts/1')\n//                 .then((response) => {\n//                     setLoading(false);\n//                     setError('');\n//                     setPost(response.data);\n//                 })\n//                 .catch(() => {\n//                     setLoading(false);\n//                     setError('Something went wrong!');\n//                     setPost({});\n//                 })\n//         }, 1000)\n//     }, []);\n\n//     return (\n//         <>\n//             {loading ? 'Loading...' : post.title}\n//             {error ? error : null}\n//         </>\n//     )\n// }\n\n// export default DataFetching\n\n// Data fetching using useEffect and useReducer - With the help of useReducer we can group the states and update all together\n\n// Initial state object\nimport { Fragment as _Fragment, jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  post: {},\n  error: '',\n  loading: true\n};\n\n// Reducer function to manage the state transitions based on action types\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'FETCH_SUCCESS':\n      return {\n        post: action.payload,\n        error: '',\n        loading: false\n      };\n    case 'FETCH_FAILED':\n      return {\n        post: {},\n        error: action.error,\n        loading: false\n      };\n    default:\n      return state;\n  }\n};\nfunction DataFetching() {\n  _s();\n  // useReducer hook to manage the component's state using the reducer function and initial state\n  const [state, dispatch] = useReducer(reducer, initialState);\n  useEffect(() => {\n    // Added setTimeout just to see the Loader\n    setTimeout(() => {\n      // Fetch data from the API endpoint\n      axios.get('https://jsonplaceholder.typicode.com/posts/10').then(response => {\n        // Dispatch the FETCH_SUCCESS action with the fetched data as payload\n        dispatch({\n          type: 'FETCH_SUCCESS',\n          payload: response.data\n        });\n      }).catch(() => {\n        // Dispatch the FETCH_FAILED action with an error message\n        dispatch({\n          type: 'FETCH_FAILED',\n          error: 'Something went wrong!'\n        });\n      });\n    }, 1000);\n  }, []); // Empty dependency array to run the effect only once on component mount\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [state.loading ? 'Loading...' : state.post.title, state.error ? state.error : null]\n  }, void 0, true);\n}\n_s(DataFetching, \"bgCdjuTOmPdSBRwTap80EFd9Y3U=\");\n_c = DataFetching;\nexport default DataFetching;\nvar _c;\n$RefreshReg$(_c, \"DataFetching\");","map":{"version":3,"names":["axios","React","useEffect","useReducer","useState","Fragment","_Fragment","jsxDEV","_jsxDEV","initialState","post","error","loading","reducer","state","action","type","payload","DataFetching","_s","dispatch","setTimeout","get","then","response","data","catch","children","title","_c","$RefreshReg$"],"sources":["/Users/apple/Desktop/Project/Git/React-study/src/components/hooks/useReducer/DataFetching.js"],"sourcesContent":["import axios from 'axios';\nimport React, { useEffect, useReducer, useState } from 'react'\n\n\n// // Data fetching using useState and useEffect.\n\n// function DataFetching() {\n\n//     const [loading, setLoading] = useState(true);\n//     const [post, setPost] = useState({})\n//     const [error, setError] = useState('');\n\n//     useEffect(() => {\n//         // Added setTimeout just to see the Loader\n//         setTimeout(() => {\n//             axios.get('https://jsonplaceholder.typicode.com/posts/1')\n//                 .then((response) => {\n//                     setLoading(false);\n//                     setError('');\n//                     setPost(response.data);\n//                 })\n//                 .catch(() => {\n//                     setLoading(false);\n//                     setError('Something went wrong!');\n//                     setPost({});\n//                 })\n//         }, 1000)\n//     }, []);\n\n//     return (\n//         <>\n//             {loading ? 'Loading...' : post.title}\n//             {error ? error : null}\n//         </>\n//     )\n// }\n\n// export default DataFetching\n\n\n// Data fetching using useEffect and useReducer - With the help of useReducer we can group the states and update all together\n\n// Initial state object\nconst initialState = {\n    post: {},\n    error: '',\n    loading: true\n};\n\n// Reducer function to manage the state transitions based on action types\nconst reducer = (state, action) => {\n    switch (action.type) {\n        case 'FETCH_SUCCESS':\n            return {\n                post: action.payload,\n                error: '',\n                loading: false\n            };\n        case 'FETCH_FAILED':\n            return {\n                post: {},\n                error: action.error,\n                loading: false\n            };\n        default:\n            return state;\n    }\n};\n\nfunction DataFetching() {\n    // useReducer hook to manage the component's state using the reducer function and initial state\n    const [state, dispatch] = useReducer(reducer, initialState);\n\n    useEffect(() => {\n        // Added setTimeout just to see the Loader\n        setTimeout(() => {\n            // Fetch data from the API endpoint\n            axios.get('https://jsonplaceholder.typicode.com/posts/10')\n                .then((response) => {\n                    // Dispatch the FETCH_SUCCESS action with the fetched data as payload\n                    dispatch({ type: 'FETCH_SUCCESS', payload: response.data });\n                })\n                .catch(() => {\n                    // Dispatch the FETCH_FAILED action with an error message\n                    dispatch({ type: 'FETCH_FAILED', error: 'Something went wrong!' });\n                });\n        }, 1000);\n    }, []); // Empty dependency array to run the effect only once on component mount\n\n    return (\n        <>\n            {/* Display loading message while fetching data */}\n            {state.loading ? 'Loading...' : state.post.title}\n\n            {/* Display error message if there's an error */}\n            {state.error ? state.error : null}\n        </>\n    );\n}\n\nexport default DataFetching;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,KAAK,IAAIC,SAAS,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;;AAG9D;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;;AAEA;AAAA,SAAAC,QAAA,IAAAC,SAAA,EAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,YAAY,GAAG;EACjBC,IAAI,EAAE,CAAC,CAAC;EACRC,KAAK,EAAE,EAAE;EACTC,OAAO,EAAE;AACb,CAAC;;AAED;AACA,MAAMC,OAAO,GAAGA,CAACC,KAAK,EAAEC,MAAM,KAAK;EAC/B,QAAQA,MAAM,CAACC,IAAI;IACf,KAAK,eAAe;MAChB,OAAO;QACHN,IAAI,EAAEK,MAAM,CAACE,OAAO;QACpBN,KAAK,EAAE,EAAE;QACTC,OAAO,EAAE;MACb,CAAC;IACL,KAAK,cAAc;MACf,OAAO;QACHF,IAAI,EAAE,CAAC,CAAC;QACRC,KAAK,EAAEI,MAAM,CAACJ,KAAK;QACnBC,OAAO,EAAE;MACb,CAAC;IACL;MACI,OAAOE,KAAK;EACpB;AACJ,CAAC;AAED,SAASI,YAAYA,CAAA,EAAG;EAAAC,EAAA;EACpB;EACA,MAAM,CAACL,KAAK,EAAEM,QAAQ,CAAC,GAAGjB,UAAU,CAACU,OAAO,EAAEJ,YAAY,CAAC;EAE3DP,SAAS,CAAC,MAAM;IACZ;IACAmB,UAAU,CAAC,MAAM;MACb;MACArB,KAAK,CAACsB,GAAG,CAAC,+CAA+C,CAAC,CACrDC,IAAI,CAAEC,QAAQ,IAAK;QAChB;QACAJ,QAAQ,CAAC;UAAEJ,IAAI,EAAE,eAAe;UAAEC,OAAO,EAAEO,QAAQ,CAACC;QAAK,CAAC,CAAC;MAC/D,CAAC,CAAC,CACDC,KAAK,CAAC,MAAM;QACT;QACAN,QAAQ,CAAC;UAAEJ,IAAI,EAAE,cAAc;UAAEL,KAAK,EAAE;QAAwB,CAAC,CAAC;MACtE,CAAC,CAAC;IACV,CAAC,EAAE,IAAI,CAAC;EACZ,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACIH,OAAA,CAAAF,SAAA;IAAAqB,QAAA,GAEKb,KAAK,CAACF,OAAO,GAAG,YAAY,GAAGE,KAAK,CAACJ,IAAI,CAACkB,KAAK,EAG/Cd,KAAK,CAACH,KAAK,GAAGG,KAAK,CAACH,KAAK,GAAG,IAAI;EAAA,eACnC,CAAC;AAEX;AAACQ,EAAA,CA7BQD,YAAY;AAAAW,EAAA,GAAZX,YAAY;AA+BrB,eAAeA,YAAY;AAAC,IAAAW,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}